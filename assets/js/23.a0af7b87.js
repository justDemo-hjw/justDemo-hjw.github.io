(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{518:function(s,n,a){"use strict";a.r(n);var e=a(6),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"react"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react"}},[s._v("#")]),s._v(" React")]),s._v(" "),a("h3",{attrs:{id:"this绑定问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#this绑定问题"}},[s._v("#")]),s._v(" this绑定问题")]),s._v(" "),a("p",[s._v("react中事件绑定是直接执行事件，不是this.事件，和vue中this.事件不同；这就会导致react中事件绑定如果用下面的方法会导致this丢失，this会指向undefined，因为在直接调用方法的时候，方法中this指向window，而在严格模式下指向undefined，在类中默认是严格模式；")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Demo extends Component {\n constructor(props) {\n   super(props)\n   this.state = {}\n }\n handleClick() {\n   console.log(this) //undefined\n }\n render() {\n   return(\n     <div>\n       {users.map(item => {\n         return(\n           <div key={item.username} onClick={this.handleClick}>\n             {item.username}\n           </div>\n         )\n       })}\n     </div>\n   )\n }\n}\n// 三种方法解决\n1. public class fields语法\nhandleClick() => {}\n2. bind this.handleClick = this.handleClick.bind(this)\n3. 箭头函数（this继承父作用域this）\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br")])]),a("h3",{attrs:{id:"diff算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#diff算法"}},[s._v("#")]),s._v(" diff算法")]),s._v(" "),a("p",[s._v("react中diff算法的时间复杂度是O(n)，有以下三个特点")]),s._v(" "),a("ol",[a("li",[s._v("只对比同级元素")]),s._v(" "),a("li",[s._v("若两元素类型不同则直接删除老节点及它的子节点，替换为新vm节点")]),s._v(" "),a("li",[s._v("通过key标明列表中哪些元素是相同的")])]),s._v(" "),a("ul",[a("li",[s._v("为什么要用key\n"),a("ul",[a("li",[s._v("在列表对比中如果从后面插入元素react在遍历过程中可以判断出是新增，但若是从头部插入元素则后面元素对比都会不同，导致相同的节点也会重新更新")]),s._v(" "),a("li",[s._v("选取key的规则，不一定要全局唯一，但要列表中唯一")])])]),s._v(" "),a("li",[s._v("为什么不能用index作为key\n"),a("ul",[a("li",[s._v("key值不稳定，列表新增时index会变动，导致标记的不是之前的元素")])])])])])}),[],!1,null,null,null);n.default=t.exports}}]);